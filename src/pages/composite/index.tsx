'use client';

import { Fragment } from 'react/jsx-runtime';

import { PatternInfo } from '../../components/pattern-info';

const CompositePage = () => {
  return (
    <Fragment>
      <PatternInfo
        title="Composite (Компоновщик)"
        description="Паттерн Composite (Компоновщик) позволяет объединять объекты в древовидные структуры для представления иерархий «часть-целое». Клиенты могут работать с отдельными объектами и целыми композициями единообразно. В React этот паттерн реализован нативно: компоненты могут содержать другие компоненты через children."
        advantages={[
          'Единый интерфейс для работы с отдельными объектами и их композициями',
          'Упрощает работу с древовидными структурами (меню, DOM, файловые системы)',
          'Удобно расширять новые узлы без изменения клиентского кода',
          'Легко строить сложные иерархии интерфейсов',
        ]}
        disadvantages={[
          'Может привести к слишком общей архитектуре (трудно ограничить использование)',
          'Повышает сложность отладки из-за вложенности',
          'Избыточен, если нет иерархических структур',
        ]}
        usage={[
          'UI-деревья (меню, навигация, дерево файлов)',
          'DOM-модель браузера — яркий пример Composite',
          'Иерархии в бизнес-логике (категории, подразделения, отчёты)',
          'Системы рендеринга графики (сцена → объекты → под-объекты)',
          'React-компоненты через children — встроенная реализация Composite',
        ]}
      />
    </Fragment>
  );
};

export default CompositePage;
